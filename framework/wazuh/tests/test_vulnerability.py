#!/usr/bin/env python
# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import sys
from unittest.mock import MagicMock, patch

import pytest

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../..'))

with patch('wazuh.core.common.ossec_uid'):
    with patch('wazuh.core.common.ossec_gid'):
        sys.modules['wazuh.rbac.orm'] = MagicMock()
        import wazuh.rbac.decorators
        from wazuh.tests.util import RBAC_bypasser

        del sys.modules['wazuh.rbac.orm']
        wazuh.rbac.decorators.expose_resources = RBAC_bypasser

        from wazuh.vulnerability import get_agent_cve
        from wazuh.core.tests.test_agent import InitAgent
        from api.util import remove_nones_to_dict, parse_api_param

test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_data = InitAgent(data_path=test_data_path)
test_data_cve = InitAgent(data_path=test_data_path, db_name='schema_cve_test.sql')


def send_msg_to_wdb(msg, raw=False):
    # Tests for CVE endpoint use a different schema and query
    query = msg[msg.find('sql') + len('sql '):]
    result = test_data.cur.execute(query).fetchall() if msg.startswith('global') else test_data_cve.cur.execute(query).fetchall()
    return list(map(remove_nones_to_dict, map(dict, result)))


@pytest.mark.parametrize('params, field_name, expected_items', [
    ({}, 'cve', ['CVE-2019-1020016', 'CVE-2019-1020014', 'CVE-2019-1020018', 'CVE-2019-1020019', 'CVE-2019-1020011']),
    ({'limit': 2}, 'cve', ['CVE-2019-1020016', 'CVE-2019-1020014']),
    ({'offset': 4, 'limit': 1}, 'cve', ['CVE-2019-1020011']),
    ({'sort': parse_api_param('+name', 'sort')}, 'name', ['Ash-aio', 'Credential Helpers', 'Discourse',
                                                          'Invenio-previewer', 'Smokedetector']),
    ({'sort': parse_api_param('-name', 'sort')}, 'name', ['Smokedetector', 'Invenio-previewer', 'Discourse',
                                                          'Credential Helpers', 'Ash-aio']),
    ({'sort': parse_api_param('+cve', 'sort')}, 'cve', ['CVE-2019-1020011', 'CVE-2019-1020014', 'CVE-2019-1020016',
                                                        'CVE-2019-1020018', 'CVE-2019-1020019']),
    ({'sort': parse_api_param('-cve', 'sort')}, 'cve', ['CVE-2019-1020019', 'CVE-2019-1020018', 'CVE-2019-1020016',
                                                        'CVE-2019-1020014', 'CVE-2019-1020011']),
    ({'search': parse_api_param('PowerPC', 'search')}, 'cve', ['CVE-2019-1020018']),
    ({'search': parse_api_param('x86', 'search')}, 'cve', ['CVE-2019-1020016', 'CVE-2019-1020014', 'CVE-2019-1020011']),
    ({'search': parse_api_param('-x86', 'search')}, 'cve', ['CVE-2019-1020018', 'CVE-2019-1020019']),
    ({'filters': {'architecture': 'x86'}}, 'cve', ['CVE-2019-1020016', 'CVE-2019-1020014', 'CVE-2019-1020011']),
    ({'filters': {'architecture': 'PowerPC'}}, 'cve', ['CVE-2019-1020018']),
    ({'filters': {'name': 'Ash-aio'}}, 'cve', ['CVE-2019-1020016']),
    ({'filters': {'version': '0.1.0'}}, 'cve', ['CVE-2019-1020014', 'CVE-2019-1020019']),
    ({'filters': {'version': '0.1.0', 'architecture': 'ARM'}}, 'cve', ['CVE-2019-1020019']),
    ({'filters': {'cve': 'CVE-2019-1020016'}}, 'cve', ['CVE-2019-1020016']),
    ({'filters': {'cve': 'CVE-2019-1020016', 'architecture': 'ARM'}}, 'cve', []),
    ({'q': 'name=Ash-aio;version>1.5'}, 'cve', ['CVE-2019-1020016']),
    ({'q': 'name=Ash-aio;version>2.5'}, 'cve', []),
    ({'q': 'architecture=ARM,architecture=PowerPC'}, 'cve', ['CVE-2019-1020018', 'CVE-2019-1020019']),
    ({'q': '(architecture=ARM,architecture=PowerPC);version>0.5'}, 'cve', ['CVE-2019-1020018']),
])
@patch('wazuh.core.wdb.WazuhDBConnection._send', side_effect=send_msg_to_wdb)
@patch('socket.socket.connect')
def test_get_agent_cve(socket_mock, send_mock, params, field_name, expected_items):
    """Check if expected items are returned when using filters on get_agent_cve()
    Parameters
    ----------
    params : dict
        Parameters to be used in the tested function.
    field_name : str
        Result's field to be checked.
    expected_items : list
        Items which should be returned in the response.
    """
    result = get_agent_cve(agent_list=['001'], **params).render()
    if expected_items:
        for idx, expected_value in enumerate(expected_items):
            assert result['data']['affected_items'][idx][field_name] == expected_value
    else:
        assert result['data']['affected_items'] == []


@pytest.mark.parametrize('params, expected_fields', [
    ({'select': ['cve']}, {'cve'}),
    ({'select': ['cve', 'name', 'architecture']}, {'cve', 'name', 'architecture'}),
    ({'select': ['version', 'name']}, {'version', 'name'}),
])
@patch('wazuh.core.wdb.WazuhDBConnection._send', side_effect=send_msg_to_wdb)
@patch('socket.socket.connect')
def test_get_agent_cve_select(socket_mock, send_mock, params, expected_fields):
    """Check if expected fields are returned when using select in get_agent_cve()"""
    result = get_agent_cve(agent_list=['001'], **params).render()
    for item in result['data']['affected_items']:
        assert expected_fields.symmetric_difference(item.keys()) == set(), '"select" param did not return expected fields.'